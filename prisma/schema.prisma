// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@index([createdById])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String           @id @default(cuid())
    name          String?
    email         String?          @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    tasks         TaskAssignment[]
    role          String           @default("basic")
    profile       Profile?
    Task          Task[]
}

model Profile {
    id           String   @id @default(cuid())
    function     String?
    profession   String?
    hasTransport Boolean?
    userId       String   @unique
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Task {
    id          String           @id @default(cuid())
    createdBy   User             @relation(fields: [createdById], references: [id])
    createdById String
    dateCreated DateTime?        @default(now())
    status      String           @default("Pending")
    name        String?          @default("Task name")
    priority    String?          @default("Normal")
    deadline    DateTime?
    description String?          @db.Text
    address     String?
    postcode    String?
    city        String?
    assignedTo  TaskAssignment[]

    @@index([createdById])
}

// A joining model to establish many-to-many relationship between User and Task
model TaskAssignment {
    taskId String
    userId String
    task   Task   @relation(fields: [taskId], references: [id])
    user   User   @relation(fields: [userId], references: [id])

    @@id([taskId, userId])
    @@index([userId])
    @@index([taskId])
}
