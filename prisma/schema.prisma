generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
  @@index([createdById])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  role          String           @default("basic")
  password      String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  tasks         TaskAssignment[]
  profile       Profile?
  Task          Task[]

  TaskNote TaskNote[]
}

model Profile {
  id           String   @id @default(cuid())
  function     String?
  profession   String?
  hasTransport Boolean?
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id              String           @id @default(cuid())
  address         String
  createdById     String
  dateCreated     DateTime         @default(now())
  description     String           @db.Text
  priority        String           @default("Normal")
  name            String           @default("Task name")
  city            String
  deadline        DateTime
  status          String           @default("Pending")
  postcode        String
  contractFileUrl String
  createdBy       User             @relation(fields: [createdById], references: [id])
  assignedTo      TaskAssignment[]
  TaskNote        TaskNote[]

  @@index([createdById])
}

model TaskAssignment {
  taskId String
  userId String
  task   Task   @relation(fields: [taskId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([taskId, userId])
  @@index([userId])
  @@index([taskId])
}

model TaskNote {
  id          String   @id @default(cuid())
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  taskId      String
  createdById String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([createdById])
}
